version: '3.8'

services:
  dev:
    container_name: nestjs_api
    image: nestjs-api:1.0.0
    environment:
      - NODE_ENV:${NODE_ENV}
      - DATABASE_URL:${DATABASE_URL}
    build:
      context: .
      args:
        - NODE_ENV="${NODE_ENV}"
      dockerfile: ./Dockerfile
    entrypoint: ["npm", "run", "start:debug"]
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - nestjs-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    depends_on:
      - postgres
      - rabbitmq


  postgres:
    container_name: postgres
    image: postgres:14.1-alpine
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - nestjs-network


  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - nestjs-network

  rabbitmq:
    build: ./rabbitmq
    container_name: 'rabbitmq'
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_log:/var/log/rabbitmq/
    networks:
      - rabbitmq_go_net
      - nestjs-network

volumes:
  rabbitmq_data:
  rabbitmq_log:
  db:
    driver: local

networks:
  nestjs-network:
    name: nestjs-network
    #external: true
  rabbitmq_go_net:
    driver: bridge
